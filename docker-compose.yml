version: "3.9"

services:
  app:
    build: .
    container_name: magpie_app
    ports:
      - "8082:8082" # Porta da aplicação Go
    env_file:
      - backend/.env # Carrega variáveis deste ficheiro. As abaixo têm precedência.
    environment:
      # URL do Redis:
      - redisUrl=redis://redis:6379 # Conecta ao serviço 'redis' na sua porta interna 6379

      # Configuração do PostgreSQL para a aplicação Go:
      # Estas variáveis correspondem ao que database_handler.go espera.
      - DB_HOST=postgres          # Nome do serviço PostgreSQL na rede Docker
      - DB_PORT=5432              # Porta INTERNA do PostgreSQL que o serviço 'app' deve usar
      - DB_NAME=magpie            # Nome da base de dados
      - DB_USERNAME=admin         # Utilizador da base de dados
      - DB_PASSWORD=admin         # Palavra-passe da base de dados
      # - PORT=8082 # A porta da aplicação Go, pode vir do .env ou ser definida aqui se necessário

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:17
    container_name: magpie_db
    environment:
      # Estas são para inicializar o próprio contentor do Postgres
      POSTGRES_USER: admin      # Corresponde a DB_USERNAME acima
      POSTGRES_PASSWORD: admin  # Corresponde a DB_PASSWORD acima
      POSTGRES_DB: magpie       # Corresponde a DB_NAME acima
    ports:
      - "5434:5432" # Porta do anfitrião 5434 mapeia para a porta INTERNA 5432 do contentor
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d magpie"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: magpie_redis
    ports:
      - "8946:6379" # Porta do anfitrião 8946 mapeia para a porta INTERNA 6379 do contentor
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
